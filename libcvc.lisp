;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :see)

(eval-when (:compile-toplevel :load-toplevel :execute)
 (progn
   (cffi:define-foreign-library libcvc
    (:darwin (:or "libcvc.0.dylib" "libcvc.dylib"))
    (:unix (:or "libcvc.so.0.1" "libcvc.so"))
    (:windows "libcvc.dll")
    (t "libcvc"))
   (cffi:use-foreign-library libcvc)))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'cl-swig-lispify)
    (cl:defun cl-swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        (constant "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("cv_open_cv_version" #.(cl-swig-lispify "cv_open_cv_version" 'function)) :string)

(cffi:defcenum #.(cl-swig-lispify "CvError" 'enumname)
	(#.(cl-swig-lispify "NO_ERROR" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "CV_ERROR" 'enumvalue :keyword) #.-1)
	(#.(cl-swig-lispify "STD_ERROR" 'enumvalue :keyword) #.-2)
	(#.(cl-swig-lispify "UNKNOWN_ERROR" 'enumvalue :keyword) #.-3)
	(#.(cl-swig-lispify "OTHER_ERROR" 'enumvalue :keyword) #.1))

(cffi:defcfun ("cv_get_error_message" #.(cl-swig-lispify "cv_get_error_message" 'function)) :string)

(cffi:defcfun ("cv_get_error_code" #.(cl-swig-lispify "cv_get_error_code" 'function)) :int)

(cffi:defcfun ("cv_set_error" #.(cl-swig-lispify "cv_set_error" 'function)) :int
  (code :int)
  (msg :string))

(cffi:defcfun ("cv_clear_error" #.(cl-swig-lispify "cv_clear_error" 'function)) :void)

(cffi:defcfun ("cv_buffer_new" #.(cl-swig-lispify "cv_buffer_new" 'function)) :pointer)

(cffi:defcfun ("cv_buffer_new_with_data" #.(cl-swig-lispify "cv_buffer_new_with_data" 'function)) :pointer
  (size :int)
  (data :pointer))

(cffi:defcfun ("cv_buffer_free" #.(cl-swig-lispify "cv_buffer_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_buffer_size" #.(cl-swig-lispify "cv_buffer_size" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_buffer_data" #.(cl-swig-lispify "cv_buffer_data" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_strings_new" #.(cl-swig-lispify "cv_strings_new" 'function)) :pointer)

(cffi:defcfun ("cv_strings_new_with_data" #.(cl-swig-lispify "cv_strings_new_with_data" 'function)) :pointer
  (count :int)
  (strings :pointer))

(cffi:defcfun ("cv_strings_add" #.(cl-swig-lispify "cv_strings_add" 'function)) :pointer
  (self :pointer)
  (string :string))

(cffi:defcfun ("cv_strings_free" #.(cl-swig-lispify "cv_strings_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_strings_count" #.(cl-swig-lispify "cv_strings_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_strings_get" #.(cl-swig-lispify "cv_strings_get" 'function)) :string
  (self :pointer)
  (i :int))

(cffi:defcfun ("cv_ints_new" #.(cl-swig-lispify "cv_ints_new" 'function)) :pointer)

(cffi:defcfun ("cv_ints_new_with_data" #.(cl-swig-lispify "cv_ints_new_with_data" 'function)) :pointer
  (count :int)
  (data :pointer))

(cffi:defcfun ("cv_ints_free" #.(cl-swig-lispify "cv_ints_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_ints_count" #.(cl-swig-lispify "cv_ints_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_ints_add" #.(cl-swig-lispify "cv_ints_add" 'function)) :pointer
  (self :pointer)
  (val :int))

(cffi:defcfun ("cv_ints_get" #.(cl-swig-lispify "cv_ints_get" 'function)) :int
  (self :pointer)
  (i :int))

(cffi:defcfun ("cv_ints_data" #.(cl-swig-lispify "cv_ints_data" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_floats_new" #.(cl-swig-lispify "cv_floats_new" 'function)) :pointer)

(cffi:defcfun ("cv_floats_new_with_data" #.(cl-swig-lispify "cv_floats_new_with_data" 'function)) :pointer
  (size :int)
  (data :pointer))

(cffi:defcfun ("cv_floats_free" #.(cl-swig-lispify "cv_floats_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_floats_count" #.(cl-swig-lispify "cv_floats_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_floats_add" #.(cl-swig-lispify "cv_floats_add" 'function)) :pointer
  (self :pointer)
  (val :float))

(cffi:defcfun ("cv_floats_get" #.(cl-swig-lispify "cv_floats_get" 'function)) :float
  (self :pointer)
  (i :int))

(cffi:defcfun ("cv_floats_data" #.(cl-swig-lispify "cv_floats_data" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_doubles_new" #.(cl-swig-lispify "cv_doubles_new" 'function)) :pointer)

(cffi:defcfun ("cv_doubles_new_with_data" #.(cl-swig-lispify "cv_doubles_new_with_data" 'function)) :pointer
  (size :int)
  (data :pointer))

(cffi:defcfun ("cv_doubles_free" #.(cl-swig-lispify "cv_doubles_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_doubles_count" #.(cl-swig-lispify "cv_doubles_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_doubles_add" #.(cl-swig-lispify "cv_doubles_add" 'function)) :pointer
  (self :pointer)
  (val :double))

(cffi:defcfun ("cv_doubles_get" #.(cl-swig-lispify "cv_doubles_get" 'function)) :double
  (self :pointer)
  (i :int))

(cffi:defcfun ("cv_doubles_data" #.(cl-swig-lispify "cv_doubles_data" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_size_new" #.(cl-swig-lispify "cv_size_new" 'function)) :pointer
  (w :float)
  (h :float))

(cffi:defcfun ("cv_size_copy" #.(cl-swig-lispify "cv_size_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_size_free" #.(cl-swig-lispify "cv_size_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_size_width" #.(cl-swig-lispify "cv_size_width" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_size_height" #.(cl-swig-lispify "cv_size_height" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_scalar_new" #.(cl-swig-lispify "cv_scalar_new" 'function)) :pointer
  (a :double)
  (b :double)
  (c :double)
  (d :double))

(cffi:defcfun ("cv_scalar_copy" #.(cl-swig-lispify "cv_scalar_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_scalar_free" #.(cl-swig-lispify "cv_scalar_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_scalar_values" #.(cl-swig-lispify "cv_scalar_values" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_point_new" #.(cl-swig-lispify "cv_point_new" 'function)) :pointer
  (x :float)
  (y :float))

(cffi:defcfun ("cv_point_copy" #.(cl-swig-lispify "cv_point_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_point_free" #.(cl-swig-lispify "cv_point_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_point_x" #.(cl-swig-lispify "cv_point_x" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_point_y" #.(cl-swig-lispify "cv_point_y" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_points_new" #.(cl-swig-lispify "cv_points_new" 'function)) :pointer)

(cffi:defcfun ("cv_points_new_with_data" #.(cl-swig-lispify "cv_points_new_with_data" 'function)) :pointer
  (count :int)
  (data :pointer))

(cffi:defcfun ("cv_points_add" #.(cl-swig-lispify "cv_points_add" 'function)) :pointer
  (self :pointer)
  (point :pointer))

(cffi:defcfun ("cv_points_free" #.(cl-swig-lispify "cv_points_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_points_count" #.(cl-swig-lispify "cv_points_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_points_get" #.(cl-swig-lispify "cv_points_get" 'function)) :pointer
  (self :pointer)
  (idx :int))

(cffi:defcfun ("cv_rect_new" #.(cl-swig-lispify "cv_rect_new" 'function)) :pointer
  (x :float)
  (y :float)
  (w :float)
  (h :float))

(cffi:defcfun ("cv_rect_copy" #.(cl-swig-lispify "cv_rect_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_rect_free" #.(cl-swig-lispify "cv_rect_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_rect_x" #.(cl-swig-lispify "cv_rect_x" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rect_y" #.(cl-swig-lispify "cv_rect_y" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rect_width" #.(cl-swig-lispify "cv_rect_width" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rect_height" #.(cl-swig-lispify "cv_rect_height" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_new" #.(cl-swig-lispify "cv_rotated_rect_new" 'function)) :pointer
  (x :float)
  (y :float)
  (width :float)
  (height :float)
  (angle :float))

(cffi:defcfun ("cv_rotated_rect_copy" #.(cl-swig-lispify "cv_rotated_rect_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_free" #.(cl-swig-lispify "cv_rotated_rect_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_x" #.(cl-swig-lispify "cv_rotated_rect_x" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_y" #.(cl-swig-lispify "cv_rotated_rect_y" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_width" #.(cl-swig-lispify "cv_rotated_rect_width" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_height" #.(cl-swig-lispify "cv_rotated_rect_height" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_angle" #.(cl-swig-lispify "cv_rotated_rect_angle" 'function)) :float
  (self :pointer))

(cffi:defcfun ("cv_rotated_rect_points" #.(cl-swig-lispify "cv_rotated_rect_points" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_rotated_rects_new" #.(cl-swig-lispify "cv_rotated_rects_new" 'function)) :pointer)

(cffi:defcfun ("cv_rotated_rects_new_with_data" #.(cl-swig-lispify "cv_rotated_rects_new_with_data" 'function)) :pointer
  (count :int)
  (data :pointer))

(cffi:defcfun ("cv_rotated_rects_add" #.(cl-swig-lispify "cv_rotated_rects_add" 'function)) :pointer
  (self :pointer)
  (rect :pointer))

(cffi:defcfun ("cv_rotated_rects_free" #.(cl-swig-lispify "cv_rotated_rects_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_rotated_rects_count" #.(cl-swig-lispify "cv_rotated_rects_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_rotated_rects_get" #.(cl-swig-lispify "cv_rotated_rects_get" 'function)) :pointer
  (self :pointer)
  (idx :int))

(cffi:defcenum #.(cl-swig-lispify "CvDepths" 'enumname)
	(#.(cl-swig-lispify "DEPTH_8U" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "DEPTH_8S" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "DEPTH_16U" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "DEPTH_16S" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "DEPTH_32S" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "DEPTH_32F" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "DEPTH_64F" 'enumvalue :keyword) #.6)
	(#.(cl-swig-lispify "DEPTH_16F" 'enumvalue :keyword) #.7))

(cffi:defcfun ("cv_mats_new" #.(cl-swig-lispify "cv_mats_new" 'function)) :pointer)

(cffi:defcfun ("cv_mats_new_copy" #.(cl-swig-lispify "cv_mats_new_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_mats_new_with_data" #.(cl-swig-lispify "cv_mats_new_with_data" 'function)) :pointer
  (size :int)
  (data :pointer))

(cffi:defcfun ("cv_mats_free" #.(cl-swig-lispify "cv_mats_free" 'function)) :void
  (self :pointer))

(cffi:defcfun ("cv_mats_add" #.(cl-swig-lispify "cv_mats_add" 'function)) :pointer
  (self :pointer)
  (mat :pointer))

(cffi:defcfun ("cv_mats_count" #.(cl-swig-lispify "cv_mats_count" 'function)) :int
  (self :pointer))

(cffi:defcfun ("cv_mats_get" #.(cl-swig-lispify "cv_mats_get" 'function)) :pointer
  (self :pointer)
  (i :int))

(cffi:defcfun ("cv_make_type" #.(cl-swig-lispify "cv_make_type" 'function)) :int
  (depth :int)
  (channels :int))

(cffi:defcfun ("cv_type_depth" #.(cl-swig-lispify "cv_type_depth" 'function)) :int
  (type :int))

(cffi:defcfun ("cv_type_channels" #.(cl-swig-lispify "cv_type_channels" 'function)) :int
  (type :int))

(cffi:defcfun ("cv_mat_new" #.(cl-swig-lispify "cv_mat_new" 'function)) :pointer)

(cffi:defcfun ("cv_mat_new_copy" #.(cl-swig-lispify "cv_mat_new_copy" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_mat_new_with_scalar" #.(cl-swig-lispify "cv_mat_new_with_scalar" 'function)) :pointer
  (shape :pointer)
  (type :int)
  (scalar :pointer))

(cffi:defcfun ("cv_mat_new_with_data" #.(cl-swig-lispify "cv_mat_new_with_data" 'function)) :pointer
  (shape :pointer)
  (type :int)
  (data :pointer))

(cffi:defcfun ("cv_mat_new_with_roi" #.(cl-swig-lispify "cv_mat_new_with_roi" 'function)) :pointer
  (self :pointer)
  (roi :pointer))

(cffi:defcfun ("cv_mat_free" #.(cl-swig-lispify "cv_mat_free" 'function)) :void
  (m :pointer))

(cffi:defcfun ("cv_mat_empty" #.(cl-swig-lispify "cv_mat_empty" 'function)) :bool
  (m :pointer))

(cffi:defcfun ("cv_mat_copy_to" #.(cl-swig-lispify "cv_mat_copy_to" 'function)) :bool
  (m :pointer)
  (dst :pointer))

(cffi:defcfun ("cv_mat_copy_to_with_mask" #.(cl-swig-lispify "cv_mat_copy_to_with_mask" 'function)) :bool
  (m :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cv_mat_convert_to" #.(cl-swig-lispify "cv_mat_convert_to" 'function)) :bool
  (self :pointer)
  (dst :pointer)
  (type :int)
  (alpha :double)
  (beta :double))

(cffi:defcfun ("cv_mat_patch_nans" #.(cl-swig-lispify "cv_mat_patch_nans" 'function)) :void
  (m :pointer)
  (val :double))

(cffi:defcfun ("cv_mat_mean" #.(cl-swig-lispify "cv_mat_mean" 'function)) :pointer
  (m :pointer))

(cffi:defcfun ("cv_mat_lut" #.(cl-swig-lispify "cv_mat_lut" 'function)) :bool
  (src :pointer)
  (lut :pointer)
  (dst :pointer))

(cffi:defcfun ("cv_mat_channels" #.(cl-swig-lispify "cv_mat_channels" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_depth" #.(cl-swig-lispify "cv_mat_depth" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_type" #.(cl-swig-lispify "cv_mat_type" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_elem_size" #.(cl-swig-lispify "cv_mat_elem_size" 'function)) :long
  (self :pointer))

(cffi:defcfun ("cv_mat_step" #.(cl-swig-lispify "cv_mat_step" 'function)) :long
  (m :pointer))

(cffi:defcfun ("cv_mat_is_continuous" #.(cl-swig-lispify "cv_mat_is_continuous" 'function)) :bool
  (m :pointer))

(cffi:defcfun ("cv_mat_total" #.(cl-swig-lispify "cv_mat_total" 'function)) :long
  (m :pointer))

(cffi:defcfun ("cv_mat_dims" #.(cl-swig-lispify "cv_mat_dims" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_size" #.(cl-swig-lispify "cv_mat_size" 'function)) :pointer
  (self :pointer))

(cffi:defcfun ("cv_mat_rows" #.(cl-swig-lispify "cv_mat_rows" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_cols" #.(cl-swig-lispify "cv_mat_cols" 'function)) :int
  (m :pointer))

(cffi:defcfun ("cv_mat_reshape" #.(cl-swig-lispify "cv_mat_reshape" 'function)) :pointer
  (m :pointer)
  (cn :int)
  (shape :pointer))

(cffi:defcfun ("cv_mat_get_ptr" #.(cl-swig-lispify "cv_mat_get_ptr" 'function)) :pointer
  (m :pointer)
  (idx :pointer))

(cffi:defcfun ("cv_get_tick_count" #.(cl-swig-lispify "cv_get_tick_count" 'function)) :long)

(cffi:defcfun ("cv_get_tick_frequency" #.(cl-swig-lispify "cv_get_tick_frequency" 'function)) :double)

(cffi:defcfun ("cv_extract_channel" #.(cl-swig-lispify "cv_extract_channel" 'function)) :bool
  (src :pointer)
  (dst :pointer)
  (coi :int))

(cffi:defcfun ("cv_merge" #.(cl-swig-lispify "cv_merge" 'function)) :pointer
  (channels :pointer))

(cffi:defcfun ("cv_mat_add_mat" #.(cl-swig-lispify "cv_mat_add_mat" 'function)) :bool
  (mat :pointer)
  (addendum :pointer))

(cffi:defcfun ("cv_mat_add_scalar" #.(cl-swig-lispify "cv_mat_add_scalar" 'function)) :bool
  (mat :pointer)
  (addendum :pointer))

(cffi:defcfun ("cv_mat_mul_const" #.(cl-swig-lispify "cv_mat_mul_const" 'function)) :bool
  (mat :pointer)
  (multiplier :double))

(cffi:defcfun ("cv_mat_dot" #.(cl-swig-lispify "cv_mat_dot" 'function)) :bool
  (self :pointer)
  (m :pointer)
  (out :pointer))

(cffi:defcenum #.(cl-swig-lispify "CvImreadModes" 'enumname)
	(#.(cl-swig-lispify "IMREAD_UNCHANGED" 'enumvalue :keyword) #.-1)
	(#.(cl-swig-lispify "IMREAD_GRAYSCALE" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "IMREAD_COLOR" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "IMREAD_ANYDEPTH" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "IMREAD_ANYCOLOR" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "IMREAD_REDUCED_GRAYSCALE_2" 'enumvalue :keyword) #.16)
	(#.(cl-swig-lispify "IMREAD_REDUCED_COLOR_2" 'enumvalue :keyword) #.17)
	(#.(cl-swig-lispify "IMREAD_REDUCED_GRAYSCALE_4" 'enumvalue :keyword) #.32)
	(#.(cl-swig-lispify "IMREAD_REDUCED_COLOR_4" 'enumvalue :keyword) #.33)
	(#.(cl-swig-lispify "IMREAD_REDUCED_GRAYSCALE_8" 'enumvalue :keyword) #.64)
	(#.(cl-swig-lispify "IMREAD_REDUCED_COLOR_8" 'enumvalue :keyword) #.65))

(cffi:defcenum #.(cl-swig-lispify "CvImreadFlags" 'enumname)
	(#.(cl-swig-lispify "IMREAD_LOAD_GDAL" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "IMREAD_IGNORE_ORIENTATION" 'enumvalue :keyword) #.128))

(cffi:defcenum #.(cl-swig-lispify "CvImwriteFlags" 'enumname)
	(#.(cl-swig-lispify "IMWRITE_JPEG_QUALITY" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "IMWRITE_JPEG_PROGRESSIVE" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "IMWRITE_JPEG_OPTIMIZE" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "IMWRITE_JPEG_RST_INTERVAL" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "IMWRITE_JPEG_LUMA_QUALITY" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "IMWRITE_JPEG_CHROMA_QUALITY" 'enumvalue :keyword) #.6)
	(#.(cl-swig-lispify "IMWRITE_PNG_COMPRESSION" 'enumvalue :keyword) #.16)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY" 'enumvalue :keyword) #.17)
	(#.(cl-swig-lispify "IMWRITE_PNG_BILEVEL" 'enumvalue :keyword) #.18)
	(#.(cl-swig-lispify "IMWRITE_PXM_BINARY" 'enumvalue :keyword) #.32)
	(#.(cl-swig-lispify "IMWRITE_EXR_TYPE" 'enumvalue :keyword) #.(cl:+ (cl:ash 3 4) 0))
	(#.(cl-swig-lispify "IMWRITE_WEBP_QUALITY" 'enumvalue :keyword) #.64)
	(#.(cl-swig-lispify "IMWRITE_PAM_TUPLETYPE" 'enumvalue :keyword) #.128)
	(#.(cl-swig-lispify "IMWRITE_TIFF_RESUNIT" 'enumvalue :keyword) #.256)
	(#.(cl-swig-lispify "IMWRITE_TIFF_XDPI" 'enumvalue :keyword) #.257)
	(#.(cl-swig-lispify "IMWRITE_TIFF_YDPI" 'enumvalue :keyword) #.258)
	(#.(cl-swig-lispify "IMWRITE_EXR_TYPE_HALF" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "IMWRITE_EXR_TYPE_FLOAT" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY_DEFAULT" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY_FILTERED" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY_RLE" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "IMWRITE_PNG_STRATEGY_FIXED" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_NULL" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_BLACKANDWHITE" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_GRAYSCALE" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_RGB" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "IMWRITE_PAM_FORMAT_RGB_ALPHA" 'enumvalue :keyword) #.5))

(cffi:defcfun ("cv_imread" #.(cl-swig-lispify "cv_imread" 'function)) :int
  (filename :string)
  (flags :int)
  (out_img :pointer))

(cffi:defcfun ("cv_imread_multi" #.(cl-swig-lispify "cv_imread_multi" 'function)) :int
  (filename :string)
  (mats :pointer)
  (flags :int))

(cffi:defcfun ("cv_imdecode" #.(cl-swig-lispify "cv_imdecode" 'function)) :int
  (buf :pointer)
  (flags :int)
  (out_img :pointer))

(cffi:defcfun ("cv_imwrite" #.(cl-swig-lispify "cv_imwrite" 'function)) :int
  (filename :string)
  (img :pointer)
  (params :pointer))

(cffi:defcfun ("cv_imencode" #.(cl-swig-lispify "cv_imencode" 'function)) :int
  (file_ext :string)
  (img :pointer)
  (params :pointer)
  (out_buffer :pointer))

(cffi:defcfun ("cv_have_image_reader" #.(cl-swig-lispify "cv_have_image_reader" 'function)) :int
  (filename :string)
  (out_result :pointer))

(cffi:defcfun ("cv_have_image_writer" #.(cl-swig-lispify "cv_have_image_writer" 'function)) :int
  (filename :string)
  (out_result :pointer))

(cffi:defcenum #.(cl-swig-lispify "CvLineTypes" 'enumname)
	(#.(cl-swig-lispify "FILLED" 'enumvalue :keyword) #.-1)
	(#.(cl-swig-lispify "LINE_4" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "LINE_8" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "LINE_AA" 'enumvalue :keyword) #.16))

(cffi:defcenum #.(cl-swig-lispify "CvHersheyFonts" 'enumname)
	(#.(cl-swig-lispify "FONT_HERSHEY_SIMPLEX" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "FONT_HERSHEY_PLAIN" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "FONT_HERSHEY_DUPLEX" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "FONT_HERSHEY_COMPLEX" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "FONT_HERSHEY_TRIPLEX" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "FONT_HERSHEY_COMPLEX_SMALL" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "FONT_HERSHEY_SCRIPT_SIMPLEX" 'enumvalue :keyword) #.6)
	(#.(cl-swig-lispify "FONT_HERSHEY_SCRIPT_COMPLEX" 'enumvalue :keyword) #.7)
	(#.(cl-swig-lispify "FONT_ITALIC" 'enumvalue :keyword) #.16))

(cffi:defcenum #.(cl-swig-lispify "CvColorConversionCodes" 'enumname)
	(#.(cl-swig-lispify "COLOR_BGR2BGRA" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "COLOR_RGB2RGBA" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "COLOR_BGRA2BGR" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "COLOR_RGBA2RGB" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "COLOR_BGR2RGBA" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "COLOR_RGB2BGRA" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "COLOR_RGBA2BGR" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "COLOR_BGRA2RGB" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "COLOR_BGR2RGB" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "COLOR_RGB2BGR" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "COLOR_BGRA2RGBA" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "COLOR_RGBA2BGRA" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "COLOR_BGR2GRAY" 'enumvalue :keyword) #.6)
	(#.(cl-swig-lispify "COLOR_RGB2GRAY" 'enumvalue :keyword) #.7)
	(#.(cl-swig-lispify "COLOR_GRAY2BGR" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "COLOR_GRAY2RGB" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "COLOR_GRAY2BGRA" 'enumvalue :keyword) #.9)
	(#.(cl-swig-lispify "COLOR_GRAY2RGBA" 'enumvalue :keyword) #.9)
	(#.(cl-swig-lispify "COLOR_BGRA2GRAY" 'enumvalue :keyword) #.10)
	(#.(cl-swig-lispify "COLOR_RGBA2GRAY" 'enumvalue :keyword) #.11)
	(#.(cl-swig-lispify "COLOR_BGR2BGR565" 'enumvalue :keyword) #.12)
	(#.(cl-swig-lispify "COLOR_RGB2BGR565" 'enumvalue :keyword) #.13)
	(#.(cl-swig-lispify "COLOR_BGR5652BGR" 'enumvalue :keyword) #.14)
	(#.(cl-swig-lispify "COLOR_BGR5652RGB" 'enumvalue :keyword) #.15)
	(#.(cl-swig-lispify "COLOR_BGRA2BGR565" 'enumvalue :keyword) #.16)
	(#.(cl-swig-lispify "COLOR_RGBA2BGR565" 'enumvalue :keyword) #.17)
	(#.(cl-swig-lispify "COLOR_BGR5652BGRA" 'enumvalue :keyword) #.18)
	(#.(cl-swig-lispify "COLOR_BGR5652RGBA" 'enumvalue :keyword) #.19)
	(#.(cl-swig-lispify "COLOR_GRAY2BGR565" 'enumvalue :keyword) #.20)
	(#.(cl-swig-lispify "COLOR_BGR5652GRAY" 'enumvalue :keyword) #.21)
	(#.(cl-swig-lispify "COLOR_BGR2BGR555" 'enumvalue :keyword) #.22)
	(#.(cl-swig-lispify "COLOR_RGB2BGR555" 'enumvalue :keyword) #.23)
	(#.(cl-swig-lispify "COLOR_BGR5552BGR" 'enumvalue :keyword) #.24)
	(#.(cl-swig-lispify "COLOR_BGR5552RGB" 'enumvalue :keyword) #.25)
	(#.(cl-swig-lispify "COLOR_BGRA2BGR555" 'enumvalue :keyword) #.26)
	(#.(cl-swig-lispify "COLOR_RGBA2BGR555" 'enumvalue :keyword) #.27)
	(#.(cl-swig-lispify "COLOR_BGR5552BGRA" 'enumvalue :keyword) #.28)
	(#.(cl-swig-lispify "COLOR_BGR5552RGBA" 'enumvalue :keyword) #.29)
	(#.(cl-swig-lispify "COLOR_GRAY2BGR555" 'enumvalue :keyword) #.30)
	(#.(cl-swig-lispify "COLOR_BGR5552GRAY" 'enumvalue :keyword) #.31)
	(#.(cl-swig-lispify "COLOR_BGR2XYZ" 'enumvalue :keyword) #.32)
	(#.(cl-swig-lispify "COLOR_RGB2XYZ" 'enumvalue :keyword) #.33)
	(#.(cl-swig-lispify "COLOR_XYZ2BGR" 'enumvalue :keyword) #.34)
	(#.(cl-swig-lispify "COLOR_XYZ2RGB" 'enumvalue :keyword) #.35)
	(#.(cl-swig-lispify "COLOR_BGR2YCrCb" 'enumvalue :keyword) #.36)
	(#.(cl-swig-lispify "COLOR_RGB2YCrCb" 'enumvalue :keyword) #.37)
	(#.(cl-swig-lispify "COLOR_YCrCb2BGR" 'enumvalue :keyword) #.38)
	(#.(cl-swig-lispify "COLOR_YCrCb2RGB" 'enumvalue :keyword) #.39)
	(#.(cl-swig-lispify "COLOR_BGR2HSV" 'enumvalue :keyword) #.40)
	(#.(cl-swig-lispify "COLOR_RGB2HSV" 'enumvalue :keyword) #.41)
	(#.(cl-swig-lispify "COLOR_BGR2Lab" 'enumvalue :keyword) #.44)
	(#.(cl-swig-lispify "COLOR_RGB2Lab" 'enumvalue :keyword) #.45)
	(#.(cl-swig-lispify "COLOR_BGR2Luv" 'enumvalue :keyword) #.50)
	(#.(cl-swig-lispify "COLOR_RGB2Luv" 'enumvalue :keyword) #.51)
	(#.(cl-swig-lispify "COLOR_BGR2HLS" 'enumvalue :keyword) #.52)
	(#.(cl-swig-lispify "COLOR_RGB2HLS" 'enumvalue :keyword) #.53)
	(#.(cl-swig-lispify "COLOR_HSV2BGR" 'enumvalue :keyword) #.54)
	(#.(cl-swig-lispify "COLOR_HSV2RGB" 'enumvalue :keyword) #.55)
	(#.(cl-swig-lispify "COLOR_Lab2BGR" 'enumvalue :keyword) #.56)
	(#.(cl-swig-lispify "COLOR_Lab2RGB" 'enumvalue :keyword) #.57)
	(#.(cl-swig-lispify "COLOR_Luv2BGR" 'enumvalue :keyword) #.58)
	(#.(cl-swig-lispify "COLOR_Luv2RGB" 'enumvalue :keyword) #.59)
	(#.(cl-swig-lispify "COLOR_HLS2BGR" 'enumvalue :keyword) #.60)
	(#.(cl-swig-lispify "COLOR_HLS2RGB" 'enumvalue :keyword) #.61)
	(#.(cl-swig-lispify "COLOR_BGR2HSV_FULL" 'enumvalue :keyword) #.66)
	(#.(cl-swig-lispify "COLOR_RGB2HSV_FULL" 'enumvalue :keyword) #.67)
	(#.(cl-swig-lispify "COLOR_BGR2HLS_FULL" 'enumvalue :keyword) #.68)
	(#.(cl-swig-lispify "COLOR_RGB2HLS_FULL" 'enumvalue :keyword) #.69)
	(#.(cl-swig-lispify "COLOR_HSV2BGR_FULL" 'enumvalue :keyword) #.70)
	(#.(cl-swig-lispify "COLOR_HSV2RGB_FULL" 'enumvalue :keyword) #.71)
	(#.(cl-swig-lispify "COLOR_HLS2BGR_FULL" 'enumvalue :keyword) #.72)
	(#.(cl-swig-lispify "COLOR_HLS2RGB_FULL" 'enumvalue :keyword) #.73)
	(#.(cl-swig-lispify "COLOR_LBGR2Lab" 'enumvalue :keyword) #.74)
	(#.(cl-swig-lispify "COLOR_LRGB2Lab" 'enumvalue :keyword) #.75)
	(#.(cl-swig-lispify "COLOR_LBGR2Luv" 'enumvalue :keyword) #.76)
	(#.(cl-swig-lispify "COLOR_LRGB2Luv" 'enumvalue :keyword) #.77)
	(#.(cl-swig-lispify "COLOR_Lab2LBGR" 'enumvalue :keyword) #.78)
	(#.(cl-swig-lispify "COLOR_Lab2LRGB" 'enumvalue :keyword) #.79)
	(#.(cl-swig-lispify "COLOR_Luv2LBGR" 'enumvalue :keyword) #.80)
	(#.(cl-swig-lispify "COLOR_Luv2LRGB" 'enumvalue :keyword) #.81)
	(#.(cl-swig-lispify "COLOR_BGR2YUV" 'enumvalue :keyword) #.82)
	(#.(cl-swig-lispify "COLOR_RGB2YUV" 'enumvalue :keyword) #.83)
	(#.(cl-swig-lispify "COLOR_YUV2BGR" 'enumvalue :keyword) #.84)
	(#.(cl-swig-lispify "COLOR_YUV2RGB" 'enumvalue :keyword) #.85)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_NV12" 'enumvalue :keyword) #.90)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_NV12" 'enumvalue :keyword) #.91)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_NV21" 'enumvalue :keyword) #.92)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_NV21" 'enumvalue :keyword) #.93)
	(#.(cl-swig-lispify "COLOR_YUV420sp2RGB" 'enumvalue :keyword) #.92)
	(#.(cl-swig-lispify "COLOR_YUV420sp2BGR" 'enumvalue :keyword) #.93)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_NV12" 'enumvalue :keyword) #.94)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_NV12" 'enumvalue :keyword) #.95)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_NV21" 'enumvalue :keyword) #.96)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_NV21" 'enumvalue :keyword) #.97)
	(#.(cl-swig-lispify "COLOR_YUV420sp2RGBA" 'enumvalue :keyword) #.96)
	(#.(cl-swig-lispify "COLOR_YUV420sp2BGRA" 'enumvalue :keyword) #.97)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_YV12" 'enumvalue :keyword) #.98)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_YV12" 'enumvalue :keyword) #.99)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_IYUV" 'enumvalue :keyword) #.100)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_IYUV" 'enumvalue :keyword) #.101)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_I420" 'enumvalue :keyword) #.100)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_I420" 'enumvalue :keyword) #.101)
	(#.(cl-swig-lispify "COLOR_YUV420p2RGB" 'enumvalue :keyword) #.98)
	(#.(cl-swig-lispify "COLOR_YUV420p2BGR" 'enumvalue :keyword) #.99)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_YV12" 'enumvalue :keyword) #.102)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_YV12" 'enumvalue :keyword) #.103)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_IYUV" 'enumvalue :keyword) #.104)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_IYUV" 'enumvalue :keyword) #.105)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_I420" 'enumvalue :keyword) #.104)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_I420" 'enumvalue :keyword) #.105)
	(#.(cl-swig-lispify "COLOR_YUV420p2RGBA" 'enumvalue :keyword) #.102)
	(#.(cl-swig-lispify "COLOR_YUV420p2BGRA" 'enumvalue :keyword) #.103)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_420" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_NV21" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_NV12" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_YV12" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_IYUV" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_I420" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV420sp2GRAY" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV420p2GRAY" 'enumvalue :keyword) #.106)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_UYVY" 'enumvalue :keyword) #.107)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_UYVY" 'enumvalue :keyword) #.108)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_Y422" 'enumvalue :keyword) #.108)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_Y422" 'enumvalue :keyword) #.108)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_UYNV" 'enumvalue :keyword) #.108)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_UYNV" 'enumvalue :keyword) #.108)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_UYVY" 'enumvalue :keyword) #.111)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_UYVY" 'enumvalue :keyword) #.112)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_Y422" 'enumvalue :keyword) #.111)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_Y422" 'enumvalue :keyword) #.112)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_UYNV" 'enumvalue :keyword) #.111)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_UYNV" 'enumvalue :keyword) #.112)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_YUY2" 'enumvalue :keyword) #.115)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_YUY2" 'enumvalue :keyword) #.116)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_YVYU" 'enumvalue :keyword) #.117)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_YVYU" 'enumvalue :keyword) #.118)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_YUYV" 'enumvalue :keyword) #.115)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_YUYV" 'enumvalue :keyword) #.116)
	(#.(cl-swig-lispify "COLOR_YUV2RGB_YUNV" 'enumvalue :keyword) #.115)
	(#.(cl-swig-lispify "COLOR_YUV2BGR_YUNV" 'enumvalue :keyword) #.116)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_YUY2" 'enumvalue :keyword) #.119)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_YUY2" 'enumvalue :keyword) #.120)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_YVYU" 'enumvalue :keyword) #.121)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_YVYU" 'enumvalue :keyword) #.122)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_YUYV" 'enumvalue :keyword) #.119)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_YUYV" 'enumvalue :keyword) #.120)
	(#.(cl-swig-lispify "COLOR_YUV2RGBA_YUNV" 'enumvalue :keyword) #.119)
	(#.(cl-swig-lispify "COLOR_YUV2BGRA_YUNV" 'enumvalue :keyword) #.120)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_UYVY" 'enumvalue :keyword) #.123)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_YUY2" 'enumvalue :keyword) #.124)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_Y422" 'enumvalue :keyword) #.123)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_UYNV" 'enumvalue :keyword) #.123)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_YVYU" 'enumvalue :keyword) #.124)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_YUYV" 'enumvalue :keyword) #.124)
	(#.(cl-swig-lispify "COLOR_YUV2GRAY_YUNV" 'enumvalue :keyword) #.124)
	(#.(cl-swig-lispify "COLOR_RGBA2mRGBA" 'enumvalue :keyword) #.125)
	(#.(cl-swig-lispify "COLOR_mRGBA2RGBA" 'enumvalue :keyword) #.126)
	(#.(cl-swig-lispify "COLOR_RGB2YUV_I420" 'enumvalue :keyword) #.127)
	(#.(cl-swig-lispify "COLOR_BGR2YUV_I420" 'enumvalue :keyword) #.128)
	(#.(cl-swig-lispify "COLOR_RGB2YUV_IYUV" 'enumvalue :keyword) #.127)
	(#.(cl-swig-lispify "COLOR_BGR2YUV_IYUV" 'enumvalue :keyword) #.128)
	(#.(cl-swig-lispify "COLOR_RGBA2YUV_I420" 'enumvalue :keyword) #.129)
	(#.(cl-swig-lispify "COLOR_BGRA2YUV_I420" 'enumvalue :keyword) #.130)
	(#.(cl-swig-lispify "COLOR_RGBA2YUV_IYUV" 'enumvalue :keyword) #.129)
	(#.(cl-swig-lispify "COLOR_BGRA2YUV_IYUV" 'enumvalue :keyword) #.130)
	(#.(cl-swig-lispify "COLOR_RGB2YUV_YV12" 'enumvalue :keyword) #.131)
	(#.(cl-swig-lispify "COLOR_BGR2YUV_YV12" 'enumvalue :keyword) #.132)
	(#.(cl-swig-lispify "COLOR_RGBA2YUV_YV12" 'enumvalue :keyword) #.133)
	(#.(cl-swig-lispify "COLOR_BGRA2YUV_YV12" 'enumvalue :keyword) #.134)
	(#.(cl-swig-lispify "COLOR_BayerBG2BGR" 'enumvalue :keyword) #.46)
	(#.(cl-swig-lispify "COLOR_BayerGB2BGR" 'enumvalue :keyword) #.47)
	(#.(cl-swig-lispify "COLOR_BayerRG2BGR" 'enumvalue :keyword) #.48)
	(#.(cl-swig-lispify "COLOR_BayerGR2BGR" 'enumvalue :keyword) #.49)
	(#.(cl-swig-lispify "COLOR_BayerBG2RGB" 'enumvalue :keyword) #.48)
	(#.(cl-swig-lispify "COLOR_BayerGB2RGB" 'enumvalue :keyword) #.49)
	(#.(cl-swig-lispify "COLOR_BayerRG2RGB" 'enumvalue :keyword) #.46)
	(#.(cl-swig-lispify "COLOR_BayerGR2RGB" 'enumvalue :keyword) #.47)
	(#.(cl-swig-lispify "COLOR_BayerBG2GRAY" 'enumvalue :keyword) #.86)
	(#.(cl-swig-lispify "COLOR_BayerGB2GRAY" 'enumvalue :keyword) #.87)
	(#.(cl-swig-lispify "COLOR_BayerRG2GRAY" 'enumvalue :keyword) #.88)
	(#.(cl-swig-lispify "COLOR_BayerGR2GRAY" 'enumvalue :keyword) #.89)
	(#.(cl-swig-lispify "COLOR_BayerBG2BGR_VNG" 'enumvalue :keyword) #.62)
	(#.(cl-swig-lispify "COLOR_BayerGB2BGR_VNG" 'enumvalue :keyword) #.63)
	(#.(cl-swig-lispify "COLOR_BayerRG2BGR_VNG" 'enumvalue :keyword) #.64)
	(#.(cl-swig-lispify "COLOR_BayerGR2BGR_VNG" 'enumvalue :keyword) #.65)
	(#.(cl-swig-lispify "COLOR_BayerBG2RGB_VNG" 'enumvalue :keyword) #.64)
	(#.(cl-swig-lispify "COLOR_BayerGB2RGB_VNG" 'enumvalue :keyword) #.65)
	(#.(cl-swig-lispify "COLOR_BayerRG2RGB_VNG" 'enumvalue :keyword) #.62)
	(#.(cl-swig-lispify "COLOR_BayerGR2RGB_VNG" 'enumvalue :keyword) #.63)
	(#.(cl-swig-lispify "COLOR_BayerBG2BGR_EA" 'enumvalue :keyword) #.135)
	(#.(cl-swig-lispify "COLOR_BayerGB2BGR_EA" 'enumvalue :keyword) #.136)
	(#.(cl-swig-lispify "COLOR_BayerRG2BGR_EA" 'enumvalue :keyword) #.137)
	(#.(cl-swig-lispify "COLOR_BayerGR2BGR_EA" 'enumvalue :keyword) #.138)
	(#.(cl-swig-lispify "COLOR_BayerBG2RGB_EA" 'enumvalue :keyword) #.137)
	(#.(cl-swig-lispify "COLOR_BayerGB2RGB_EA" 'enumvalue :keyword) #.138)
	(#.(cl-swig-lispify "COLOR_BayerRG2RGB_EA" 'enumvalue :keyword) #.135)
	(#.(cl-swig-lispify "COLOR_BayerGR2RGB_EA" 'enumvalue :keyword) #.136)
	(#.(cl-swig-lispify "COLOR_BayerBG2BGRA" 'enumvalue :keyword) #.139)
	(#.(cl-swig-lispify "COLOR_BayerGB2BGRA" 'enumvalue :keyword) #.140)
	(#.(cl-swig-lispify "COLOR_BayerRG2BGRA" 'enumvalue :keyword) #.141)
	(#.(cl-swig-lispify "COLOR_BayerGR2BGRA" 'enumvalue :keyword) #.142)
	(#.(cl-swig-lispify "COLOR_BayerBG2RGBA" 'enumvalue :keyword) #.141)
	(#.(cl-swig-lispify "COLOR_BayerGB2RGBA" 'enumvalue :keyword) #.142)
	(#.(cl-swig-lispify "COLOR_BayerRG2RGBA" 'enumvalue :keyword) #.139)
	(#.(cl-swig-lispify "COLOR_BayerGR2RGBA" 'enumvalue :keyword) #.140)
	(#.(cl-swig-lispify "COLOR_COLORCVT_MAX" 'enumvalue :keyword) #.143))

(cffi:defcenum #.(cl-swig-lispify "CvInterpolationFlags" 'enumname)
	(#.(cl-swig-lispify "INTER_NEAREST" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "INTER_LINEAR" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "INTER_CUBIC" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "INTER_AREA" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "INTER_LANCZOS4" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "INTER_LINEAR_EXACT" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "INTER_MAX" 'enumvalue :keyword) #.7)
	(#.(cl-swig-lispify "WARP_FILL_OUTLIERS" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "WARP_INVERSE_MAP" 'enumvalue :keyword) #.16))

(cffi:defcfun ("cv_cvt_color" #.(cl-swig-lispify "cv_cvt_color" 'function)) :int
  (src :pointer)
  (dst :pointer)
  (code :int)
  (dstCn :int))

(cffi:defcfun ("cv_blur" #.(cl-swig-lispify "cv_blur" 'function)) :int
  (src :pointer)
  (dst :pointer)
  (ksize :pointer)
  (anchor :pointer)
  (borderType :int))

(cffi:defcfun ("cv_resize" #.(cl-swig-lispify "cv_resize" 'function)) :int
  (src :pointer)
  (dst :pointer)
  (dsize :pointer)
  (fx :double)
  (fy :double)
  (interpolation :int))

(cffi:defcfun ("cv_line" #.(cl-swig-lispify "cv_line" 'function)) :int
  (img :pointer)
  (pt1 :pointer)
  (pt2 :pointer)
  (color :pointer)
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cv_arrowed_line" #.(cl-swig-lispify "cv_arrowed_line" 'function)) :int
  (img :pointer)
  (pt1 :pointer)
  (pt2 :pointer)
  (color :pointer)
  (thickness :int)
  (line_type :int)
  (shift :int)
  (tipLength :double))

(cffi:defcfun ("cv_circle" #.(cl-swig-lispify "cv_circle" 'function)) :int
  (img :pointer)
  (center :pointer)
  (radius :int)
  (color :pointer)
  (thickness :int)
  (lineType :int)
  (shift :int))

(cffi:defcfun ("cv_ellipse" #.(cl-swig-lispify "cv_ellipse" 'function)) :int
  (img :pointer)
  (center :pointer)
  (axes :pointer)
  (angle :double)
  (startAngle :double)
  (endAngle :double)
  (color :pointer)
  (thickness :int)
  (lineType :int)
  (shift :int))

(cffi:defcfun ("cv_rectangle" #.(cl-swig-lispify "cv_rectangle" 'function)) :int
  (img :pointer)
  (rect :pointer)
  (color :pointer)
  (thickness :int)
  (lineType :int)
  (shift :int))

(cffi:defcfun ("cv_get_text_size" #.(cl-swig-lispify "cv_get_text_size" 'function)) :int
  (text :string)
  (fontFace :int)
  (fontScale :double)
  (thickness :int)
  (out_baseline :pointer)
  (out_size :pointer))

(cffi:defcfun ("cv_put_text" #.(cl-swig-lispify "cv_put_text" 'function)) :int
  (img :pointer)
  (text :string)
  (org :pointer)
  (fontFace :int)
  (fontScale :double)
  (color :pointer)
  (thickness :int)
  (lineType :int)
  (bottomLeftOrigin :bool))

(cffi:defcfun ("cv_median_blur" #.(cl-swig-lispify "cv_median_blur" 'function)) :int
  (input :pointer)
  (output :pointer)
  (ksize :int))

(cffi:defcenum #.(cl-swig-lispify "CvMouseEventTypes" 'enumname)
	(#.(cl-swig-lispify "EVENT_MOUSEMOVE" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "EVENT_LBUTTONDOWN" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "EVENT_RBUTTONDOWN" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "EVENT_MBUTTONDOWN" 'enumvalue :keyword) #.3)
	(#.(cl-swig-lispify "EVENT_LBUTTONUP" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "EVENT_RBUTTONUP" 'enumvalue :keyword) #.5)
	(#.(cl-swig-lispify "EVENT_MBUTTONUP" 'enumvalue :keyword) #.6)
	(#.(cl-swig-lispify "EVENT_LBUTTONDBLCLK" 'enumvalue :keyword) #.7)
	(#.(cl-swig-lispify "EVENT_RBUTTONDBLCLK" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "EVENT_MBUTTONDBLCLK" 'enumvalue :keyword) #.9)
	(#.(cl-swig-lispify "EVENT_MOUSEWHEEL" 'enumvalue :keyword) #.10)
	(#.(cl-swig-lispify "EVENT_MOUSEHWHEEL" 'enumvalue :keyword) #.11))

(cffi:defcenum #.(cl-swig-lispify "CvMouseEventFlags" 'enumname)
	(#.(cl-swig-lispify "EVENT_FLAG_LBUTTON" 'enumvalue :keyword) #.1)
	(#.(cl-swig-lispify "EVENT_FLAG_RBUTTON" 'enumvalue :keyword) #.2)
	(#.(cl-swig-lispify "EVENT_FLAG_MBUTTON" 'enumvalue :keyword) #.4)
	(#.(cl-swig-lispify "EVENT_FLAG_CTRLKEY" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "EVENT_FLAG_SHIFTKEY" 'enumvalue :keyword) #.16)
	(#.(cl-swig-lispify "EVENT_FLAG_ALTKEY" 'enumvalue :keyword) #.32))

(cffi:defcfun ("cv_named_window" #.(cl-swig-lispify "cv_named_window" 'function)) :int
  (winname :string)
  (flags :int))

(cffi:defcfun ("cv_destroy_window" #.(cl-swig-lispify "cv_destroy_window" 'function)) :int
  (winname :string))

(cffi:defcfun ("cv_destroy_all_windows" #.(cl-swig-lispify "cv_destroy_all_windows" 'function)) :int)

(cffi:defcfun ("cv_imshow" #.(cl-swig-lispify "cv_imshow" 'function)) :int
  (winname :string)
  (mat :pointer))

(cffi:defcfun ("cv_get_window_property" #.(cl-swig-lispify "cv_get_window_property" 'function)) :int
  (winname :string)
  (flag :int)
  (out_value :pointer))

(cffi:defcfun ("cv_set_window_property" #.(cl-swig-lispify "cv_set_window_property" 'function)) :int
  (winname :string)
  (flag :int)
  (value :double))

(cffi:defcfun ("cv_set_window_title" #.(cl-swig-lispify "cv_set_window_title" 'function)) :int
  (winname :string)
  (title :string))

(cffi:defcfun ("cv_wait_key" #.(cl-swig-lispify "cv_wait_key" 'function)) :int
  (delay :int)
  (out_key :pointer))

(cffi:defcfun ("cv_move_window" #.(cl-swig-lispify "cv_move_window" 'function)) :int
  (winname :string)
  (x :int)
  (y :int))

(cffi:defcfun ("cv_resize_window" #.(cl-swig-lispify "cv_resize_window" 'function)) :int
  (winname :string)
  (width :int)
  (height :int))

(cffi:defcfun ("cv_set_mouse_callback" #.(cl-swig-lispify "cv_set_mouse_callback" 'function)) :int
  (winname :string)
  (on_mouse :pointer)
  (userdata :pointer))

(cffi:defcenum #.(cl-swig-lispify "CvVideoCaptureAPIs" 'enumname)
	(#.(cl-swig-lispify "CAP_ANY" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "CAP_VFW" 'enumvalue :keyword) #.200)
	(#.(cl-swig-lispify "CAP_V4L" 'enumvalue :keyword) #.200)
	(#.(cl-swig-lispify "CAP_V4L2" 'enumvalue :keyword) #.200)
	(#.(cl-swig-lispify "CAP_FIREWIRE" 'enumvalue :keyword) #.300)
	(#.(cl-swig-lispify "CAP_FIREWARE" 'enumvalue :keyword) #.300)
	(#.(cl-swig-lispify "CAP_IEEE1394" 'enumvalue :keyword) #.300)
	(#.(cl-swig-lispify "CAP_DC1394" 'enumvalue :keyword) #.300)
	(#.(cl-swig-lispify "CAP_CMU1394" 'enumvalue :keyword) #.300)
	(#.(cl-swig-lispify "CAP_QT" 'enumvalue :keyword) #.500)
	(#.(cl-swig-lispify "CAP_UNICAP" 'enumvalue :keyword) #.600)
	(#.(cl-swig-lispify "CAP_DSHOW" 'enumvalue :keyword) #.700)
	(#.(cl-swig-lispify "CAP_PVAPI" 'enumvalue :keyword) #.800)
	(#.(cl-swig-lispify "CAP_OPENNI" 'enumvalue :keyword) #.900)
	(#.(cl-swig-lispify "CAP_OPENNI_ASUS" 'enumvalue :keyword) #.910)
	(#.(cl-swig-lispify "CAP_ANDROID" 'enumvalue :keyword) #.1000)
	(#.(cl-swig-lispify "CAP_XIAPI" 'enumvalue :keyword) #.1100)
	(#.(cl-swig-lispify "CAP_AVFOUNDATION" 'enumvalue :keyword) #.1200)
	(#.(cl-swig-lispify "CAP_GIGANETIX" 'enumvalue :keyword) #.1300)
	(#.(cl-swig-lispify "CAP_MSMF" 'enumvalue :keyword) #.1400)
	(#.(cl-swig-lispify "CAP_WINRT" 'enumvalue :keyword) #.1410)
	(#.(cl-swig-lispify "CAP_INTELPERC" 'enumvalue :keyword) #.1500)
	(#.(cl-swig-lispify "CAP_OPENNI2" 'enumvalue :keyword) #.1600)
	(#.(cl-swig-lispify "CAP_OPENNI2_ASUS" 'enumvalue :keyword) #.1610)
	(#.(cl-swig-lispify "CAP_GPHOTO2" 'enumvalue :keyword) #.1700)
	(#.(cl-swig-lispify "CAP_GSTREAMER" 'enumvalue :keyword) #.1800)
	(#.(cl-swig-lispify "CAP_FFMPEG" 'enumvalue :keyword) #.1900)
	(#.(cl-swig-lispify "CAP_IMAGES" 'enumvalue :keyword) #.2000)
	(#.(cl-swig-lispify "CAP_ARAVIS" 'enumvalue :keyword) #.2100)
	(#.(cl-swig-lispify "CAP_OPENCV_MJPEG" 'enumvalue :keyword) #.2200)
	(#.(cl-swig-lispify "CAP_INTEL_MFX" 'enumvalue :keyword) #.2300)
	(#.(cl-swig-lispify "CAP_XINE" 'enumvalue :keyword) #.2400))

(cffi:defcfun ("cv_video_capture_new" #.(cl-swig-lispify "cv_video_capture_new" 'function)) :pointer)

(cffi:defcfun ("cv_video_capture_free" #.(cl-swig-lispify "cv_video_capture_free" 'function)) :void
  (v :pointer))

(cffi:defcfun ("cv_video_capture_open_uri" #.(cl-swig-lispify "cv_video_capture_open_uri" 'function)) :bool
  (v :pointer)
  (uri :string)
  (api_preference :int))

(cffi:defcfun ("cv_video_capture_open_device" #.(cl-swig-lispify "cv_video_capture_open_device" 'function)) :bool
  (v :pointer)
  (device :int)
  (api_preference :int))

(cffi:defcfun ("cv_video_capture_set" #.(cl-swig-lispify "cv_video_capture_set" 'function)) :void
  (v :pointer)
  (prop :int)
  (param :double))

(cffi:defcfun ("cv_video_capture_get" #.(cl-swig-lispify "cv_video_capture_get" 'function)) :double
  (v :pointer)
  (prop :int))

(cffi:defcfun ("cv_video_capture_is_opened" #.(cl-swig-lispify "cv_video_capture_is_opened" 'function)) :bool
  (v :pointer))

(cffi:defcfun ("cv_video_capture_read" #.(cl-swig-lispify "cv_video_capture_read" 'function)) :bool
  (v :pointer)
  (buf :pointer))

(cffi:defcfun ("cv_video_capture_grab" #.(cl-swig-lispify "cv_video_capture_grab" 'function)) :bool
  (v :pointer))

(cffi:defcfun ("cv_video_capture_retrieve" #.(cl-swig-lispify "cv_video_capture_retrieve" 'function)) :bool
  (v :pointer)
  (buf :pointer)
  (flag :int))

(cffi:defcfun ("cv_video_writer_new" #.(cl-swig-lispify "cv_video_writer_new" 'function)) :pointer)

(cffi:defcfun ("cv_video_writer_free" #.(cl-swig-lispify "cv_video_writer_free" 'function)) :void
  (vw :pointer))

(cffi:defcfun ("cv_video_writer_fourcc" #.(cl-swig-lispify "cv_video_writer_fourcc" 'function)) :int
  (c1 :char)
  (c2 :char)
  (c3 :char)
  (c4 :char))

(cffi:defcfun ("cv_video_writer_open" #.(cl-swig-lispify "cv_video_writer_open" 'function)) :bool
  (vw :pointer)
  (name :string)
  (fourcc :int)
  (fps :double)
  (size :pointer)
  (isColor :bool))

(cffi:defcfun ("cv_video_writer_is_opened" #.(cl-swig-lispify "cv_video_writer_is_opened" 'function)) :bool
  (vw :pointer))

(cffi:defcfun ("cv_video_writer_write" #.(cl-swig-lispify "cv_video_writer_write" 'function)) :bool
  (vw :pointer)
  (img :pointer))

(cffi:defcenum #.(cl-swig-lispify "CvBackend" 'enumname)
	#.(cl-swig-lispify "DNN_BACKEND_DEFAULT" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_BACKEND_HALIDE" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_BACKEND_INFERENCE_ENGINE" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_BACKEND_OPENCV" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_BACKEND_VKCOM" 'enumvalue :keyword))

(cffi:defcenum #.(cl-swig-lispify "CvTarget" 'enumname)
	#.(cl-swig-lispify "DNN_TARGET_CPU" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_TARGET_OPENCL" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_TARGET_OPENCL_FP16" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_TARGET_MYRIAD" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_TARGET_VULKAN" 'enumvalue :keyword)
	#.(cl-swig-lispify "DNN_TARGET_FPGA" 'enumvalue :keyword))

(cffi:defcfun ("cv_dnn_read_net" #.(cl-swig-lispify "cv_dnn_read_net" 'function)) :pointer
  (model :string)
  (config :string)
  (framework :string))

(cffi:defcfun ("cv_dnn_net_free" #.(cl-swig-lispify "cv_dnn_net_free" 'function)) :void
  (net :pointer))

(cffi:defcfun ("cv_dnn_net_empty" #.(cl-swig-lispify "cv_dnn_net_empty" 'function)) :bool
  (net :pointer))

(cffi:defcfun ("cv_dnn_net_set_input" #.(cl-swig-lispify "cv_dnn_net_set_input" 'function)) :bool
  (net :pointer)
  (blob :pointer)
  (name :string)
  (scale_factor :double)
  (mean :pointer))

(cffi:defcfun ("cv_dnn_net_forward" #.(cl-swig-lispify "cv_dnn_net_forward" 'function)) :pointer
  (net :pointer)
  (output_name :string))

(cffi:defcfun ("cv_dnn_net_forward_layers" #.(cl-swig-lispify "cv_dnn_net_forward_layers" 'function)) :pointer
  (net :pointer)
  (layer_names :pointer))

(cffi:defcfun ("cv_dnn_net_set_preferable_backend" #.(cl-swig-lispify "cv_dnn_net_set_preferable_backend" 'function)) :bool
  (net :pointer)
  (backend :int))

(cffi:defcfun ("cv_dnn_net_set_preferable_target" #.(cl-swig-lispify "cv_dnn_net_set_preferable_target" 'function)) :bool
  (net :pointer)
  (target :int))

(cffi:defcfun ("cv_dnn_net_get_perf_profile" #.(cl-swig-lispify "cv_dnn_net_get_perf_profile" 'function)) :long
  (net :pointer)
  (out_layers :pointer))

(cffi:defcfun ("cv_dnn_blob_from_images" #.(cl-swig-lispify "cv_dnn_blob_from_images" 'function)) :bool
  (images :pointer)
  (out_blob :pointer)
  (scale_factor :double)
  (size :pointer)
  (mean :pointer)
  (swap_rb :bool)
  (crop :bool)
  (depth :int))

(cffi:defcfun ("cv_dnn_net_get_layer_names" #.(cl-swig-lispify "cv_dnn_net_get_layer_names" 'function)) :pointer
  (net :pointer))

(cffi:defcfun ("cv_dnn_net_get_layer_with_name" #.(cl-swig-lispify "cv_dnn_net_get_layer_with_name" 'function)) :pointer
  (net :pointer)
  (layer_name :string))

(cffi:defcfun ("cv_dnn_net_get_layer_with_id" #.(cl-swig-lispify "cv_dnn_net_get_layer_with_id" 'function)) :pointer
  (net :pointer)
  (layer_id :int))

(cffi:defcfun ("cv_dnn_layer_free" #.(cl-swig-lispify "cv_dnn_layer_free" 'function)) :void
  (layer :pointer))

(cffi:defcfun ("cv_dnn_layer_blobs" #.(cl-swig-lispify "cv_dnn_layer_blobs" 'function)) :pointer
  (layer :pointer))

(cffi:defcfun ("cv_dnn_layer_add_blob" #.(cl-swig-lispify "cv_dnn_layer_add_blob" 'function)) :bool
  (layer :pointer)
  (blob :pointer))

(cffi:defcfun ("cv_dnn_layer_input_name_to_index" #.(cl-swig-lispify "cv_dnn_layer_input_name_to_index" 'function)) :int
  (layer :pointer)
  (name :string))

(cffi:defcfun ("cv_dnn_layer_output_name_to_index" #.(cl-swig-lispify "cv_dnn_layer_output_name_to_index" 'function)) :int
  (layer :pointer)
  (name :string))

(cffi:defcfun ("cv_dnn_layer_name" #.(cl-swig-lispify "cv_dnn_layer_name" 'function)) :string
  (layer :pointer))

(cffi:defcfun ("cv_dnn_layer_type" #.(cl-swig-lispify "cv_dnn_layer_type" 'function)) :string
  (layer :pointer))

(cffi:defcfun ("cv_dnn_nms_boxes" #.(cl-swig-lispify "cv_dnn_nms_boxes" 'function)) :pointer
  (bboxes :pointer)
  (scores :pointer)
  (score_threshold :float)
  (nms_threshold :float)
  (eta :float)
  (top_k :int))

(cffi:defcenum #.(cl-swig-lispify "CvInterpolationWarp" 'enumname)
	(#.(cl-swig-lispify "WARP_NONE" 'enumvalue :keyword) #.0)
	(#.(cl-swig-lispify "WARP_FILL_OUTLIERS" 'enumvalue :keyword) #.8)
	(#.(cl-swig-lispify "WARP_INVERSE_MAP" 'enumvalue :keyword) #.16))


